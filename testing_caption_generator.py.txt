
from tensorflow.keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.applications.xception import Xception
from keras.models import load_model
from pickle import load
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import argparse


ap = argparse.ArgumentParser()
ap.add_argument('-i', '--image', required=True, help="Image Path")
args = vars(ap.parse_args())
img_path = args['image']

from PIL import Image
import numpy as np

def extract_features(filename, model):
    try:
        # Attempt to open the image file
        image = Image.open(filename)
    except Exception as e:
        # Print an error message if the image cannot be opened
        print(f"ERROR: Couldn't open image! Make sure the image path and extension is correct. {e}")
        return None  # Return None if the image cannot be loaded

    # Resize the image to the required size
    image = image.resize((299, 299))
    
    # Convert the image to a numpy array
    image = np.array(image)
    
    # Check for 4 channels (RGBA), and convert to 3 channels (RGB) if necessary
    if image.shape[2] == 4:
        image = image[..., :3]
    
    # Expand dimensions for batch size (model expects a batch of images)
    image = np.expand_dims(image, axis=0)
    
    # Normalize the image data
    image = image / 127.5
    image = image - 1.0
    
    # Extract features using the model
    feature = model.predict(image)
    
    return feature

def word_for_id(integer, tokenizer):
 for word, index in tokenizer.word_index.items():
     if index == integer:
         return word
 return None


def generate_desc(model, tokenizer, photo, max_length):
    in_text = 'start'
    for i in range(max_length):
        sequence = tokenizer.texts_to_sequences([in_text])[0]
        sequence = pad_sequences([sequence], maxlen=max_length)
        pred = model.predict([photo,sequence], verbose=0)
        pred = np.argmax(pred)
        word = word_for_id(pred, tokenizer)
        if word is None:
            break
        in_text += ' ' + word
        if word == 'end':
            break
    return in_text


#path = 'Flicker8k_Dataset/111537222_07e56d5a30.jpg'
max_length = 32
tokenizer = load(open("C:\\Users\\Dell\\Downloads\\python-project-image-caption-generator\\tokenizer.p","rb"))
model = load_model('C:\\Users\\Dell\\Downloads\\python-project-image-caption-generator\\models\\model_9.h5')
xception_model = Xception(include_top=False, pooling="avg")

photo = extract_features(img_path, xception_model)
img = Image.open(img_path)

description = generate_desc(model, tokenizer, photo, max_length)
print("\n\n")
print(description)
plt.imshow(img)


